type Transaction @entity {
	id:                           ID!
	timestamp:                    BigInt!
	blockNumber:                  BigInt!
	accountTransferEvents:        [AccountTransferEvent!]! @derivedFrom(field: "transaction")
	accountMaintenanceEvent:      [AccountMaintenanceEvent!]! @derivedFrom(field: "transaction")
	tokenReserveEvent:            [TokenReserveEvent!]! @derivedFrom(field: "transaction")
	lendOrderEvent:               [LendOrderEvent!]! @derivedFrom(field: "transaction")
	borrowOrderEvent:             [BorrowOrderEvent!]! @derivedFrom(field: "transaction")
	marginOrderEvent:             [MarginOrderEvent!]! @derivedFrom(field: "transaction")
	tradeEvent:                   [TradeEvent!]! @derivedFrom(field: "transaction")
}

# =============================================================================
# =                                                                           =
# =============================================================================
type Token @entity {
	id:                           ID!
	name:                         String!
	symbol:                       String!
	decimals:                     Int!
	transfers:                    [AccountTransferEvent!]! @derivedFrom(field: "token")
	reservesEvents:               [TokenReserveEvent!]! @derivedFrom(field: "token")
	isLent:                       [LendOrder!]! @derivedFrom(field: "token")
	isBorrowPrincipal:            [BorrowOrder!]! @derivedFrom(field: "principalToken")
	isBorrowCollateral:           [BorrowOrder!]! @derivedFrom(field: "collateralToken")
	isMarginPrincipal:            [MarginOrderEvent!]! @derivedFrom(field: "principalToken")
	isMarginCollateral:           [MarginOrderEvent!]! @derivedFrom(field: "collateralToken")
	isMarginTrade:                [MarginOrderEvent!]! @derivedFrom(field: "tradeToken")
	isMarginClosing:              [MarginOrderEvent!]! @derivedFrom(field: "closingToken")
	asTradeFrom:                  [TradeEvent!]! @derivedFrom(field: "srcToken")
	asTradeTo:                    [TradeEvent!]! @derivedFrom(field: "destToken")
}

type Account @entity {
	id:                           ID!
	users:                        [AccountUser!]! @derivedFrom(field: "account")
	lending:                      [LendOrder!]! @derivedFrom(field: "account")
	borrowing:                    [BorrowOrder!]! @derivedFrom(field: "account")
	margin:                       [MarginOrder!]! @derivedFrom(field: "account")
	transfers:                    [AccountTransferEvent!]! @derivedFrom(field: "account")
	maintenance:                  [AccountMaintenanceEvent!]! @derivedFrom(field: "account")
}

type User @entity {
	id:                           ID!
	accounts:                     [AccountUser!]! @derivedFrom(field: "user")
}

type AccountUser @entity {
	id:                           ID!
	account:                      Account!
	user:                         User!
}

# =============================================================================
# =                         Account - Transfer events                         =
# =============================================================================
interface AccountTransferEvent {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
	from:                         Account!
	to:                           Bytes!
	value:                        BigDecimal!
}

type AccountTransferBySystem implements AccountTransferEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
	from:                         Account!
	to:                           Bytes!
	value:                        BigDecimal!
	by:                           Bytes!
}

type AccountTransferByUser implements AccountTransferEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
	from:                         Account!
	to:                           Bytes!
	value:                        BigDecimal!
	by:                           User!
}

# =============================================================================
# =                      Account - Administative events                       =
# =============================================================================
interface AccountMaintenanceEvent {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	account:                      Account!
}

type AccountUserAdded implements AccountMaintenanceEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	account:                      Account!
	user:                         User!
	by:                           User!
}

type AccountUserRemoved implements AccountMaintenanceEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	account:                      Account!
	user:                         User!
	by:                           User!
}

type AccountImplChanged implements AccountMaintenanceEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	account:                      Account!
	newImpl:                      Bytes!
	oldImpl:                      Bytes!
}

# =============================================================================
# =                                  Reserve                                  =
# =============================================================================
interface TokenReserveEvent {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
}

type TokenReserveUpdate implements TokenReserveEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
	reserve:                      BigDecimal!
	profit:                       BigDecimal!
	loss:                         BigDecimal!
	updatedTill:                  BigInt!
}

type TokenReserveRelease implements TokenReserveEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
	to:                           Account!
	value:                        BigDecimal!
	by:                           Bytes!
}

type TokenReserveLoss implements TokenReserveEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
	from:                         Account!
	value:                        BigDecimal!
	profit:                       BigDecimal!
	loss:                         BigDecimal!
	by:                           Bytes!
}

# =============================================================================
# =                             Reserve - Lending                             =
# =============================================================================
enum LendOrderStatus {
	ACTIVE
	CLOSED
}

type LendOrder @entity {
	id:                           ID!
	status:                       LendOrderStatus!
	account:                      Account!
	byUser:                       User!
	token:                        Token!
	createdValue:                 BigDecimal!
	createdTimestamp:             BigInt!
	cumulativeValue:              BigDecimal!
	cumulativeTimestamp:          BigInt!
	expirationTimestamp:          BigInt!
	updates:                      [LendOrderEvent!]! @derivedFrom(field: "order")
}

interface LendOrderEvent {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        LendOrder!
}

type LendOrderCreated implements LendOrderEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        LendOrder!
}

type LendOrderCancelled implements LendOrderEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        LendOrder!
	by:                           Bytes!
}

type LendOrderCumulativeUpdate implements LendOrderEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        LendOrder!
	value:                        BigDecimal!
}

# =============================================================================
# =                            Kernel - Borrowing                             =
# =============================================================================
enum BorrowOrderStatus {
	ACTIVE
	REPAID
	DEFAULTED
}

enum BorrowOrderDefaultedReason{
	DUE_DATE_PASSED
	COLLATERAL_UNSAFE
}

type BorrowOrder @entity {
	id:                           ID!
	status:                       BorrowOrderStatus!
	account:                      Account!
	byUser:                       User!
	principalToken:               Token!
	principalAmount:              BigDecimal!
	collateralToken:              Token!
	collateralAmount:             BigDecimal!
	premium:                      BigDecimal!
	fee:                          BigDecimal!
	createdTimestamp:             BigInt!
	expirationTimestamp:          BigInt!
	updates:                      [BorrowOrderEvent!]! @derivedFrom(field: "order")
}

interface BorrowOrderEvent {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        BorrowOrder!
}

type BorrowOrderCreated implements BorrowOrderEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        BorrowOrder!
}

type BorrowOrderRepaid implements BorrowOrderEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        BorrowOrder!
	valueRepaid:                  BigDecimal!
}

type BorrowOrderDefaulted implements BorrowOrderEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        BorrowOrder!
	reason:                       BorrowOrderDefaultedReason!
}

# =============================================================================
# =                         MKernel - Margin Trading                          =
# =============================================================================
enum MarginOrderStatus
{
	ACTIVE
	LIQUIDATED
	STOPPED
	DEFAULTED
}

enum MarginOrderDefaultedReason
{
	MKERNEL_DUE_DATE_PASSED
	MKERNEL_ORDER_UNSAFE
}

type MarginOrder @entity {
	id:                           ID!
	status:                       MarginOrderStatus!
	account:                      Account!
	byUser:                       User!
	principalToken:               Token!
	principalAmount:              BigDecimal!
	collateralToken:              Token!
	collateralAmount:             BigDecimal!
	tradeToken:                   Token!      # TRADE
	closingToken:                 Token!      # TRADE
	exchangeConnector:            Bytes!      # TRADE
	stopProfit:                   BigDecimal! # TRADE
	stopLoss:                     BigDecimal! # TRADE
	premium:                      BigDecimal!
	fee:                          BigDecimal!
	createdTimestamp:             BigInt!
	expirationTimestamp:          BigInt!
	salt:                         BigInt!
	updates:                      [MarginOrderEvent!]! @derivedFrom(field: "order")
}

interface MarginOrderEvent
{
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        MarginOrder!
}

type MarginOrderCreated implements MarginOrderEvent @entity
{
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        MarginOrder!
}

type MarginOrderLiquidatedByUser implements MarginOrderEvent @entity
{
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        MarginOrder!
}

type MarginOrderStoppedAtProfit implements MarginOrderEvent @entity
{
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        MarginOrder!
}

type MarginOrderDefaulted implements MarginOrderEvent @entity
{
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        MarginOrder!
	reason:                       MarginOrderDefaultedReason!
}

type MarginSettlement implements MarginOrderEvent @entity
{
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        MarginOrder!
	valueRepaid:                  BigDecimal!
	reserveProfit:                BigDecimal!
	reserveLoss:                  BigDecimal!
	collateralLeft:               BigDecimal!
	userProfit:                   BigDecimal!
	fee:                          BigDecimal!
}

# =============================================================================
# =                                  Trades                                   =
# =============================================================================
interface TradeEvent {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	from:                         Bytes!
	srcToken:                     Token!
	destToken:                    Token!
	srcTokenValue:                BigDecimal!
	srcTokenValueLeft:            BigDecimal!
	destTokenValue:               BigDecimal!
	destTokenValueMax:            BigDecimal!
	exchangeRate:                 BigDecimal!
}

type UniswapTrade implements TradeEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	from:                         Bytes!
	srcToken:                     Token!
	destToken:                    Token!
	srcTokenValue:                BigDecimal!
	srcTokenValueLeft:            BigDecimal!
	destTokenValue:               BigDecimal!
	destTokenValueMax:            BigDecimal!
	exchangeRate:                 BigDecimal!
}

type KyberTrade implements TradeEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	from:                         Bytes!
	srcToken:                     Token!
	destToken:                    Token!
	srcTokenValue:                BigDecimal!
	srcTokenValueLeft:            BigDecimal!
	destTokenValue:               BigDecimal!
	destTokenValueMax:            BigDecimal!
	exchangeRate:                 BigDecimal!
}
