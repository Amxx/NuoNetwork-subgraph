type Transaction @entity {
	id:                           ID!
	from:                         Bytes!
	to:                           Bytes!
	value:                        BigInt!
	gasUsed:                      BigInt!
	gasPrice:                     BigInt!
	timestamp:                    BigInt!
	blockNumber:                  BigInt!
	accountTransferEvents:        [AccountTransferEvent!]! @derivedFrom(field: "transaction")
	accountMaintenanceEvent:      [AccountMaintenanceEvent!]! @derivedFrom(field: "transaction")
	reserveOrderEvent:            [ReserveOrderEvent!]! @derivedFrom(field: "transaction")
	kernelOrderEvent:             [KernelOrderEvent!]! @derivedFrom(field: "transaction")
}

# =============================================================================
# =                                                                           =
# =============================================================================
type Token @entity {
	id:                           ID!
	transfers:                    [AccountTransferEvent!]! @derivedFrom(field: "token")
	reserveUpdates:               [ReserveValuesUpdated!]! @derivedFrom(field: "token")
	asReserve:                    [ReserveOrder!]! @derivedFrom(field: "token")
	asPrincipal:                  [KernelOrder!]! @derivedFrom(field: "principalToken")
	asCollateral:                 [KernelOrder!]! @derivedFrom(field: "collateralToken")
}

type Account @entity {
	id:                           ID!
	users:                        [AccountUser!]! @derivedFrom(field: "account")
	lending:                      [ReserveOrder!]! @derivedFrom(field: "account")
	borrowing:                    [KernelOrder!]! @derivedFrom(field: "account")
	transfers:                    [AccountTransferEvent!]! @derivedFrom(field: "account")
	maintenance:                  [AccountMaintenanceEvent!]! @derivedFrom(field: "account")
}

type User @entity {
	id:                           ID!
	accounts:                     [AccountUser!]! @derivedFrom(field: "user")
}

type AccountUser @entity {
	id:                           ID!
	account:                      Account!
	user:                         User!
}

# =============================================================================
# =                         Account - Transfer events                         =
# =============================================================================
interface AccountTransferEvent {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
	from:                         Account!
	to:                           Bytes!
	value:                        BigInt!
	by:                           Bytes!
}

type AccountTransferBySystem implements AccountTransferEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
	from:                         Account!
	to:                           Bytes!
	value:                        BigInt!
	by:                           Bytes!
}

type AccountTransferByUser implements AccountTransferEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
	from:                         Account!
	to:                           Bytes!
	value:                        BigInt!
	by:                           Bytes!
}

# =============================================================================
# =                      Account - Administative events                       =
# =============================================================================
interface AccountMaintenanceEvent {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	account:                      Account!
}

type AccountUserAdded implements AccountMaintenanceEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	account:                      Account!
	user:                         User!
	by:                           Bytes!
}

type AccountUserRemoved implements AccountMaintenanceEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	account:                      Account!
	user:                         User!
	by:                           Bytes!
}

type AccountImplChanged implements AccountMaintenanceEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	account:                      Account!
	newImpl:                      Bytes!
	oldImpl:                      Bytes!
}

# =============================================================================
# =                             Reserve - Lending                             =
# =============================================================================
enum ReserveOrderStatus {
	ACTIVE
	CLOSED
}

type ReserveOrder @entity {
	id:                           ID!
	status:                       ReserveOrderStatus!
	account:                      Account!
	byUser:                       User!
	token:                        Token!
	createdValue:                 BigInt!
	createdTimestamp:             BigInt!
	cumulativeValue:              BigInt!
	cumulativeTimestamp:          BigInt!
	expirationTimestamp:          BigInt!
	updates:                      [ReserveOrderEvent!]! @derivedFrom(field: "order")
}

interface ReserveOrderEvent {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        ReserveOrder!
}

type ReserveOrderCreated implements ReserveOrderEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        ReserveOrder!
}

type ReserveOrderCancelled implements ReserveOrderEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        ReserveOrder!
	by:                           Bytes!
}

type ReserveOrderCumulativeUpdate implements ReserveOrderEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        ReserveOrder!
	value:                        BigInt!
}

type ReserveValuesUpdated @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	token:                        Token!
	reserve:                      BigInt!
	profit:                       BigInt!
	loss:                         BigInt!
}

# =============================================================================
# =                            Kernel - Borrowing                             =
# =============================================================================
enum KernelOrderStatus {
	ACTIVE
	REPAID
	DEFAULTED
}
enum KernelOrderDefaultedReason{
	DUE_DATE_PASSED
	COLLATERAL_UNSAFE
}

type KernelOrder @entity {
	id:                           ID!
	status:                       KernelOrderStatus!
	account:                      Account!
	byUser:                       User!
	principalToken:               Token!
	principalAmount:              BigInt!
	collateralToken:              Token!
	collateralAmount:             BigInt!
	premium:                      BigInt!
	fee:                          BigInt!
	createdTimestamp:             BigInt!
	expirationTimestamp:          BigInt!
	updates:                      [KernelOrderEvent!]! @derivedFrom(field: "order")
}

interface KernelOrderEvent {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        KernelOrder!
}

type KernelOrderCreated implements KernelOrderEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        KernelOrder!
}

type KernelOrderRepaid implements KernelOrderEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        KernelOrder!
	valueRepaid:                  BigInt!
}

type KernelOrderDefaulted implements KernelOrderEvent @entity {
	id:                           ID!
	transaction:                  Transaction!
	timestamp:                    BigInt!
	order:                        KernelOrder!
	reason:                       KernelOrderDefaultedReason!
}
